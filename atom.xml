<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>那1抹微笑</title>
  
  <subtitle>把心方正，一帆风顺；把心放平，风平浪静。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-22T03:33:01.944Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xywang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java代码是怎么运行的？</title>
    <link href="http://yoursite.com/2019/11/22/java%E4%BB%A3%E7%A0%81%E6%98%AF%E6%80%8E%E4%B9%88%E8%BF%90%E8%A1%8C%E7%9A%84%EF%BC%9F/"/>
    <id>http://yoursite.com/2019/11/22/java%E4%BB%A3%E7%A0%81%E6%98%AF%E6%80%8E%E4%B9%88%E8%BF%90%E8%A1%8C%E7%9A%84%EF%BC%9F/</id>
    <published>2019-11-22T02:59:55.108Z</published>
    <updated>2019-11-22T03:33:01.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java代码是怎么运行的？"><a href="#java代码是怎么运行的？" class="headerlink" title="java代码是怎么运行的？"></a>java代码是怎么运行的？</h2><h3 id="java代码的运行需要什么？"><a href="#java代码的运行需要什么？" class="headerlink" title="java代码的运行需要什么？"></a>java代码的运行需要什么？</h3><pre><code>必须要有jre(java运行时环境)</code></pre><h3 id="jre里面有什么？"><a href="#jre里面有什么？" class="headerlink" title="jre里面有什么？"></a>jre里面有什么？</h3><pre><code>java虚拟机java核心类库</code></pre><h3 id="jdk是什么？"><a href="#jdk是什么？" class="headerlink" title="jdk是什么？"></a>jdk是什么？</h3><pre><code>java开发工具包JDK里面也包含了jre此外还有一系列开发和诊断工具</code></pre><h3 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h3><h4 id="java为什么要在虚拟机中运行？"><a href="#java为什么要在虚拟机中运行？" class="headerlink" title="java为什么要在虚拟机中运行？"></a>java为什么要在虚拟机中运行？</h4><pre><code>Java作为高级程序语言，愈发复杂，抽象程度高，因为无法在硬件上运行。这就需要设计一个面向Java语言特性的虚拟机，并通过编译器将Java程序转换为该虚拟机所能识别的指令序列，也就是Java字节码</code></pre><p>为什么要叫Java字节码（因为指令的操作码opcode被固定为一个字节）</p><h5 id="虚拟机的优点"><a href="#虚拟机的优点" class="headerlink" title="虚拟机的优点"></a>虚拟机的优点</h5><pre><code> 跨平台：一次编译到处执行 提供托管环境：JVM能代替程序员去做一些复杂且容易出错的工作 峰值性能更佳：JVM进行预热后，针对热点方法由于大量优化，且能够在运行中动态获取方法执行的情况等信息，从而能进一步优化，提高峰值性能</code></pre><h5 id="Java虚拟机的实现方式"><a href="#Java虚拟机的实现方式" class="headerlink" title="Java虚拟机的实现方式"></a>Java虚拟机的实现方式</h5><pre><code>可以由硬件实现：Java Proccessor（Java虚拟机在硬件上的实现），当前有十多种具体实现的Jvm最常见的是在各个平台上提供软件实现</code></pre><h5 id="Java虚拟机采用软件实现的好处"><a href="#Java虚拟机采用软件实现的好处" class="headerlink" title="Java虚拟机采用软件实现的好处"></a>Java虚拟机采用软件实现的好处</h5><pre><code>能够实现 一次编写，到处运行，因为程序一旦转为Java字节码，就可以在不通过平台的虚拟机实现里执行</code></pre><h5 id="采用JVM作为托管环境的好处是什么"><a href="#采用JVM作为托管环境的好处是什么" class="headerlink" title="采用JVM作为托管环境的好处是什么"></a>采用JVM作为托管环境的好处是什么</h5><pre><code>1、这个托管环境能够代替我们处理一些代码中冗长而且容易出错的部分2、自动内存管理3、垃圾回收4、数组越界、动态类型、安全权限等动态检测</code></pre><h5 id="Java虚拟机如何运行Java字节码"><a href="#Java虚拟机如何运行Java字节码" class="headerlink" title="Java虚拟机如何运行Java字节码"></a>Java虚拟机如何运行Java字节码</h5><p>标准JDK中的HotSpot是如何运行Java字节码的呢？<br>需要从两个角度考虑</p><h5 id="一、虚拟机角度"><a href="#一、虚拟机角度" class="headerlink" title="一、虚拟机角度"></a>一、虚拟机角度</h5><pre><code> 1、首先会将Java代码编译成的class文件加载到JVM 2、加载后的Java类会存放到方法区中 3、实际运行时，JVM会执行方法区内的代码 4、运行时，每当调用进入一个Java方法，JVM会在当前线程的Java方法栈中生成一个栈帧 5、退出执行的Java方法时，无论是不是正常返回，JVM都会弹出并舍弃掉当前线程的当前栈帧</code></pre><p>栈帧是什么？</p><pre><code>1、用于存放局部变量、字节码的操作数2、栈帧的大小是提前计算好的3、JVM不要求栈帧在内存空间连续分布</code></pre><p>JVM中内存组成部分有哪些？线程共享的是哪些部分？线程私有的是哪些部分？</p><pre><code>线程共享： 方法区：存放加载后的Java类 堆：创建的对象实例线程私有： Java方法栈：面向Java方法 本地方法栈：面向C++写的native方法 PC寄存器：存放各个线程执行位置</code></pre><h5 id="二、底层硬件角度"><a href="#二、底层硬件角度" class="headerlink" title="二、底层硬件角度"></a>二、底层硬件角度</h5><pre><code> 1、Java字节码无法直接执行 2、JVM需要将字节码翻译成机器码JVM（如HotSpot）如何将字节码翻译成机器码？两种方法： 解释执行-逐条将字节码翻译成机器码执行； 即时编译（Just_In-Time compilation, JIT）-将一个方法中的字节码都编译成机器码后在执行</code></pre><p>HotSpot是如何采用这两种方法去执行Java代码呢？</p><pre><code>1、默认采用混合模式2、综合了两者的优点3、会先解释执行字节码4、之后将其中反复执行的热点代码，以方法为单位进行即时编译</code></pre><p>即时编译是以什么为单位进行优化的？</p><pre><code>以方法为单位</code></pre><h5 id="Java虚拟机的效率如何"><a href="#Java虚拟机的效率如何" class="headerlink" title="Java虚拟机的效率如何"></a>Java虚拟机的效率如何</h5><p>Java虚拟机的效率如何？<br>HotSpot采用多种技术来提升启动性能和峰值性能<br>即时编译是重要技术之一<br>即时编译建立在二八定律之上，也就是20%的代码占据了80%的计算资源</p><p>为什么Java不和C++一样直接编译成机器码呢？<br>理论上Java的性能可以比C++更高<br>与静态编译相比，即时编译拥有程序的运行时信息，并能以此进行相应的优化<br>借助这些信息系，可以规避虚方法调用的开销，从而比静态编译的C++程序的性能更高</p><p>HotSpot内置了哪几种即时编译器？分别有什么作用和特点？<br>C1 ：Client编译器，优化手段简单，编译时间短，适合对启动性能有要求的客户端程序<br>C2 ： Server编译器，适合对峰值性能有要求的服务端程序，优化手段复杂，编译时间长，生成的代码执行效率高<br>Graal：实验性即时编译器</p><p>HotSpot如何采用这些即时编译器进行编译工作？</p><pre><code>HotSpot默认采用分层编译(从Java7开始)热点方法会先用C1编译然后热点方法中的热点，进一步用C2编译</code></pre><p>HotSpot中编译线程是什么?</p><pre><code>为了不干扰应用的执行，即时编译会在额外的编译线程中进行。HotSpot会根据CPU数量设置编译线程的数目并且1:2的比例分配给C1和C2编译器</code></pre><p>资源充足时，即时编译会替换解释执行？</p><pre><code>资源充足时，即时编译会替换解释执行在计算资源充足的情况下，字节码的解释执行和即时编译可同时进行。即时编译完成后的机器码会在 下次调用该方法时启用，以替换原本的解释执行。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;java代码是怎么运行的？&quot;&gt;&lt;a href=&quot;#java代码是怎么运行的？&quot; class=&quot;headerlink&quot; title=&quot;java代码是怎么运行的？&quot;&gt;&lt;/a&gt;java代码是怎么运行的？&lt;/h2&gt;&lt;h3 id=&quot;java代码的运行需要什么？&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/11/22/hello-world/"/>
    <id>http://yoursite.com/2019/11/22/hello-world/</id>
    <published>2019-11-22T01:18:59.172Z</published>
    <updated>2019-11-22T01:18:59.172Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
